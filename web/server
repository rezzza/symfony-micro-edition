#!/usr/bin/env php
<?php
require __DIR__.'/../app/autoload.php';

use Icicle\Http\Message\{BasicResponse, Request, Response};
use Icicle\Http\Server\{RequestHandler, Server};
use Icicle\Socket\Socket;
use Icicle\Loop;

//necessary, since connections will be dropped without reasons after several hundred connections.
gc_disable();
//make whatever is necesary to disable all stuff that could buffer output
ini_set('zlib.output_compression', 0);
ini_set('output_buffering', 0);
ini_set('implicit_flush', 1);
ob_implicit_flush(1);

$kernel = new AppKernel(getenv('SYMFONY_ENV'), (getenv('SYMFONY_DEBUG') !== '0'));

class SymfonyServer implements RequestHandler
{
    private $kernel;

    public function __construct($kernel)
    {
        $this->kernel = $kernel;
    }

    public function onRequest(Request $request, Socket $socket)
    {
        $uri = $request->getRequestTarget();
        $query = $uri->getQueryValues();
        $body = $request->getBody();
        $content = $body->isReadable() ? yield $body->read() : null;

        $sfRequest = new Symfony\Component\HttpFoundation\Request(
            $query, // GET params
            [], // POST params
            [], //  request attributes (parameters parsed from the PATH_INFO, ...)
            [], // A rest api is cookieless ;)
            [], // TODO $request->getFiles(), // file params
            [], // Server is partially filled a few lines below
            $content
        );
        $sfRequest->setMethod($request->getMethod());
        $headers = $request->getHeaders();
        $sfRequest->headers->replace($headers);
        $sfRequest->server->set('REQUEST_URI', $uri->getPath());
        if (isset($headers['Host'])) {
            $sfRequest->server->set('SERVER_NAME', $headers['Host'][0]);
        }

        $sfResponse = $this->kernel->handle($sfRequest);
        $response = new BasicResponse(
            $sfResponse->getStatusCode(),
            $sfResponse->headers->all()
        );

        yield from $response->getBody()->end($sfResponse->getContent());

        yield $response;
        $this->kernel->terminate($sfRequest, $sfResponse);
    }

    public function onError($code, Socket $socket)
    {
        yield new BasicResponse($code);
    }
}

$server = new Server(new SymfonyServer($kernel));
$server->listen(getenv('LISTEN'), '0.0.0.0');
Loop\run();
